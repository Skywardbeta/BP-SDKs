#!/bin/bash

# Scott Burleigh
# September 11, 2012

set -e  # Exit immediately if a command exits with a non-zero status.
trap 'echo "An error occurred. Exiting."; exit 1;' ERR

# Documentation boilerplate
CONFIGFILES=" \
./global.ionrc \
./1.ipn.bss/node.ionconfig \
./1.ipn.bss/node.ionrc \
./1.ipn.bss/node.ionsecrc \
./1.ipn.bss/node.bprc.1 \
./1.ipn.bss/node.ltprc \
./1.ipn.bss/node.owltsim \
./2.ipn.bss/node.ionconfig \
./2.ipn.bss/node.ionrc \
./2.ipn.bss/node.ionsecrc \
./2.ipn.bss/node.bprc.1 \
./2.ipn.bss/node.ltprc \
./3.ipn.bss/node.ionconfig \
./3.ipn.bss/node.ionrc \
./3.ipn.bss/node.ionsecrc \
./3.ipn.bss/node.bprc.1 \
./3.ipn.bss/node.ltprc \
./3.ipn.bss/node.bprc.2 \
./4.ipn.bss/node.ionconfig \
./4.ipn.bss/node.ionrc \
./4.ipn.bss/node.ionsecrc \
./4.ipn.bss/node.bprc.1 \
./4.ipn.bss/node.ltprc \
./4.ipn.bss/node.bprc.2 \
"

echo "########################################"
echo
pwd | sed "s/\/.*\///" | xargs echo "NAME: "
echo
echo "PURPOSE: Demonstrate the functionality of Bundle Streaming Service.
Demonstrates BSS multicast:

This demo simulates the multicast streaming by sending a stream 
of bundles from node 1 to multicast group 19 for 30 seconds. The network 
is a tree with the following edges all running LTP: (1,2), (2,3) and (2,4).
Node 3 and 4 are part of multicast group 19."

echo
echo "CONFIG: 4 node custom BSS:"
echo
for N in $CONFIGFILES
do
	echo "$N:"
	cat "$N"
	echo "# EOF"
	echo
done
echo "OUTPUT: Terminal messages will relay results."
echo
echo "########################################"

./cleanup
echo "Starting ION..."
export ION_NODE_LIST_DIR=$PWD
rm -f ./ion_nodes
sleep 1

# Start nodes
cd 1.ipn.bss
echo "Starting node 1..."
./ionstart >& node1.stdout &
sleep 5

cd ../2.ipn.bss
echo "Starting node 2..."
./ionstart >& node2.stdout &
sleep 1

cd ../3.ipn.bss
echo "Starting node 3..."
./ionstart >& node3.stdout &
sleep 1

cd ../4.ipn.bss
echo "Starting node 4..."
./ionstart >& node4.stdout &

# Wait for all nodes to be configured
sleep 5

# Register node 3 and 4 in imc:19.0
cd ../3.ipn.bss
echo "Register node 3 into multicast group imc:19.0"
bpadmin node.bprc.2

cd ../4.ipn.bss
echo "Register node 4 into multicast group imc:19.0"
bpadmin node.bprc.2

sleep 5

# Start BSS receiver on nodes 3 and 4
echo
echo "Starting bssrecv application..."
cd ../3.ipn.bss
xterm -geom 160x40 -e bssrecv 3 bssDB ./ imc:19.0 &
cd ../4.ipn.bss
xterm -geom 160x40 -e bssrecv 3 bssDB ./ imc:19.0 &
sleep 2

cd ../1.ipn.bss
echo
echo "Sending a stream of bundles from node 1 to group 19 for 30 seconds..."
echo "bssStreamingApp started at $(date +"%Y/%m/%d-%T")"
xterm -e bssStreamingApp ipn:1.2 imc:19.0 &
sleep 30
pkill -SIGINT bssStreamingApp
TOTIME=$(date +"%Y/%m/%d-%T")
echo

# Give nodes enough time to receive all the reforwarded frames from node 1
echo "Wait 15 seconds to ensure the complete reception of the stream from node 2..."
sleep 15
pkill bssrecv

# Check that data was actually received in the database
cd ../3.ipn.bss
if [ ! -s bssDB.dat ]; then
    echo "Node 3 did not receive data, test failed."
	exit 1
fi

cd ../4.ipn.bss
if [ ! -s bssDB.dat ]; then
    echo "Node 4 did not receive data, test failed."
	exit 1
fi

echo
echo "Replaying the received stream."
cd ../3.ipn.bss
xterm -geom 160x40 -e "bssrecv 1 bssDB ./ imc:19.0 +0 \"$TOTIME\" | tee node3_replay.stdout" &
cd ../4.ipn.bss
xterm -geom 160x40 -e "bssrecv 1 bssDB ./ imc:19.0 +0 \"$TOTIME\" | tee node4_replay.stdout" &
echo
sleep 70
pkill bssrecv

# Check that data was replayed
# This checks that the 10th bundle was replayed, which we expect.
cd ../3.ipn.bss
if ! grep -q "**********10" node3_replay.stdout ; then
    echo "Relay failed in node 3."
	exit 1
fi
cd ../4.ipn.bss
if ! grep -q "**********10" node4_replay.stdout ; then
    echo "Replay failed in node 4."
	exit 1
fi

cd ../4.ipn.bss
if [ ! -s bssDB.dat ]; then
    echo "Node 4 did not receive data, test failed."
	exit 1
fi

# Shut down ION processes
echo
echo "Stopping ION..."
cd ../1.ipn.bss
./ionstop &
cd ../2.ipn.bss
./ionstop &
cd ../3.ipn.bss
./ionstop &
cd ../4.ipn.bss
./ionstop &

# Give all nodes time to shut down, then clean up
sleep 15
killm
echo "BSS multicast demo completed."
echo "Please verify playback on the real-time bssrecv terminal windows."
